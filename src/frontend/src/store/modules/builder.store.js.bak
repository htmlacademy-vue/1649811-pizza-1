// import {
//   ADD_ENTITY,
//   UPDATE_ENTITY,
//   DELETE_ENTITY,
//   SET_ENTITY,
// } from "../mutation-types";
// import { capitalize } from "../../common/utils/helpers";
import { dough, ingredients, sauces, sizes } from "../../static/pizza.json";
import {
  normalizeDough,
  normalizeSize,
  normalizeIngredient,
} from "../../common/utils/helpers";

// const entity = "builder";
// const module = capitalize(entity);
// const namespace = { entity, module };

export default {
  namespaced: true,
  state: {
    doughs: dough.map((item) => normalizeDough(item)),
    ingredients: ingredients.map((item) => normalizeIngredient(item)),
    sauces,
    sizes: sizes.map((item) => normalizeSize(item)),
    ingredientsPrice: 0,
    pizza: {
      dough: dough[0],
      ingredients: [],
      sauce: sauces[0],
      size: sizes[0],
      price: 0,
    },
  },
  getters: {
    pizza: (state) => state.pizza,
    doughs: (state) => state.doughs,
    ingredients: (state) => state.ingredients,
    sauces: (state) => state.sauces,
    sizes: (state) => state.sizes,
    ingredientsPrice: (state) => state.ingredientsPrice,
  },
  actions: {
    setDough({ getters, commit }, doughName) {
      const dough = getters.doughs.find((item) => item.name === doughName);
      commit("setDough", dough);
      commit("setPrice");
    },
    setSauce({ commit }, sauce) {
      commit("setSauce", sauce);
      commit("setPrice");
    },
    setSize({ commit }, size) {
      commit("setSize", size);
      commit("setPrice");
    },
    addIngredient({ commit }, ingredient) {
      commit("addIngredient", ingredient);
      commit("setIngredientsPrice");
      commit("setPrice");
    },
    removeIngredient({ commit }, ingredient) {
      commit("removeIngredient", ingredient);
      commit("setIngredientsPrice");
      commit("setPrice");
    },
    setPrice({ commit }) {
      commit("setPrice");
    },
  },
  mutations: {
    setDough(state, dough) {
      state.pizza.dough = dough;
    },
    setSauce(state, sauce) {
      state.pizza.sauce = sauce;
    },
    setSize(state, size) {
      state.pizza.size = size;
    },
    addIngredient(state, ingredient) {
      const { pizza } = state;
      const addedIngredient = pizza.ingredients.find(
        (item) => item.id === ingredient.id
      );
      if (addedIngredient) {
        addedIngredient.count++;
      } else {
        pizza.ingredients = [...pizza.ingredients, ingredient];
      }
    },
    removeIngredient(state, ingredient) {
      const { pizza } = state;
      const removedIngredient = pizza.ingredients.find(
        (item) => item.id === ingredient.id
      );
      if (removedIngredient && removedIngredient.count > 0) {
        removedIngredient.count--;
      }
    },
    setPrice(state) {
      const {
        pizza: { dough, sauce, size },
      } = state;

      state.pizza.price =
        (state.ingredientsPrice + dough.price + sauce.price) * size.multiplier;
    },
    setIngredientsPrice(state) {
      const {
        pizza: { ingredients },
      } = state;

      state.ingredientsPrice = ingredients.reduce(
        (acc, item) => acc + item.count * item.price,
        0
      );
    },
  },
};
